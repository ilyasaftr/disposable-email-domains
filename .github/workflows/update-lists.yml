name: Update Lists

on:
  schedule:
    - cron: "0 * * * *"
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  execute:
    name: Build allow/deny lists with Go
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5

      - name: Setup Go
        uses: actions/setup-go@v6
        with:
          go-version: 'stable'
          cache: true

      - name: Generate lists
        run: |
          go run . \
            --out-text-deny lists/deny.txt \
            --out-json-deny lists/deny.json \
            --out-text-allow lists/allow.txt \
            --out-json-allow lists/allow.json

          echo "### Lists Generated" >> $GITHUB_STEP_SUMMARY
          echo "- Deny entries: $(wc -l < lists/deny.txt)" >> $GITHUB_STEP_SUMMARY
          echo "- Allow entries: $(wc -l < lists/allow.txt)" >> $GITHUB_STEP_SUMMARY

      - name: Commit and push changes
        id: commit
        env:
          GIT_AUTHOR_NAME: github-actions[bot]
          GIT_AUTHOR_EMAIL: 41898282+github-actions[bot]@users.noreply.github.com
          GIT_COMMITTER_NAME: github-actions[bot]
          GIT_COMMITTER_EMAIL: 41898282+github-actions[bot]@users.noreply.github.com
        run: |
          set -euo pipefail
          git add lists/
          if git diff --cached --quiet; then
            echo "No changes to commit."
            echo "changed=false" >> "$GITHUB_OUTPUT"
          else
            git commit -m "chore: automatic list update"
            git push
            echo "changed=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Purge jsDelivr CDN
        if: steps.commit.outputs.changed == 'true'
        run: |
          set -euo pipefail
          BASE="https://cdn.jsdelivr.net/gh/${GITHUB_REPOSITORY}@main/lists"
          PURGE_BASE="https://purge.jsdelivr.net/gh/${GITHUB_REPOSITORY}@main/lists"
          for f in deny.txt deny.json allow.txt allow.json; do
            echo "Purging jsDelivr cache for $f"
            # Hit the CDN URL (warming) and then request purge
            curl -fsS "$BASE/$f" >/dev/null || true
            curl -fsS "$PURGE_BASE/$f" >/dev/null || echo "Purge request failed for $f" >&2
          done
